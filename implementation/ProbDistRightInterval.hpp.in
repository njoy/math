#ifndef MATH_IMPLEMENTATION_PROBADISTRIGHTINTERVAL_HPP
#define MATH_IMPLEMENTATION_PROBADISTRIGHTINTERVAL_HPP

#include "math/API/ProbabilityDistribution.hpp"
#include "math/implementation.hpp"

namespace math {
namespace implementation {

/**
 * @brief
 * A compile time probability distribution decoration which overrides the default
 * behaviour of the probabilityDensity and cumulativeDensity methods over the
 * right-most interval of the event domain.
 *
 * @details
 * A probability distribution delegates probabilityDensity and cumulative 
 * probability to composed objects by default. This isn't always desirable.
 * Take a composed interpolation table describing a probability density 
 * distribution for example: queries to the table are only meaningful for
 * event values between the table's xMin and xMax values. This decorator defines
 * a edge such that cdf and pdf queries for event values to the right of the edge
 * will return unity and zero, respectively, without querying the composed 
 * objects 
 */
template< typename CoreProbabilityDistribution >
class ProbDistRightInterval final :
    public math::API::ProbabilityDistribution {
public:
  /* constructor and destructor */
  ProbDistRightInterval
  ( CoreProbabilityDistribution&& core, const double leftEndPoint ) :
    core( std::move(core) ), leftEndPoint( leftEndPoint ){}

  ProbDistRightInterval
  ( const ProbDistRightInterval& ) = default;

  ProbDistRightInterval
  ( ProbDistRightInterval&& ) = default;

  ~ProbDistRightInterval() = default;

  /* methods */
  double
  probabilityDensity( const double event ) const {
    return event > this->leftEndPoint ?
      0.0 : this->core.probabilityDensity(event);
  }

  double
  cumulativeProbability( const double event ) const {
    return event > this->leftEndPoint ?
      1.0 : this->core.cumulativeProbability(event);
  }
  
  /* fields */
  CoreProbabilityDistribution core;
  double leftEndPoint;
};

}
}

#endif
