#ifndef MATH_IMPLEMENTATION_BIVARIATEPROBABILITYDISTRIBUTION_HPP
#define MATH_IMPLEMENTATION_BIVARIATEPROBABILITYDISTRIBUTION_HPP

#include "math/API/BivariateProbabilityDistribution.hpp"
#include "math/API/ProbabilityDistribution.hpp"
#include "math/implementation.hpp"

namespace math{
namespace implementation{

/**
 * @tparam pdfInterpolant
 * The interpolation scheme used to determine probability density values given 
 * a condition lying between the conditions of two specified probability density 
 * functions
 * 
 * @tparam cdfInterpolant
 * The interpolation scheme used to determine cumulative probability values (in 
 * event space) given a condition lying between the conditions of two specified 
 * cumulative probability functions
 */
template< Interpolant pdfInterpolant, Interpolant cdfInterpolant >
class BivariateProbabilityDistribution final :
  public math::API::BivariateProbabilityDistribution {
  
public:

  /* constructor and destructor */
  BivariateProbabilityDistribution
  ( std::vector<double>&& specifiedVariates,
    std::vector< std::unique_ptr<math::API::ProbabilityDistribution> >&&
    conditionedProbabilityDistributions,
    const bool trust = true );

  ~BivariateProbabilityDistribution() = default;
  
  /* methods */
  double 
  conditionalProbabilityDensity( const double event, 
                                 const double condition ) const;

  double 
  conditionalCumulativeProbability( const double event, 
                                    const double condition ) const;

  std::unique_ptr< math::API::ProbabilityDistribution >
  conditionalProbabilityDistribution( const double condition ) const;

  double
  lowerConditionLimit(){ return this->conditions.front(); }

  double
  upperConditionLimit(){ return this->conditions.back(); }
  
  /* fields */
  /** 
   * @brief 
   * Variant values (conditions) for which the conditional probability 
   * distribution is explicitly specified
   */
  std::vector<double> conditions;

  /** 
   * @brief 
   * The probability distributions given a condition value in the conditions
   * vector.
   */
  std::vector< std::unique_ptr< math::API::ProbabilityDistribution > > 
  conditionedProbabilityDistributions;

};

}
}

#include "math/implementation/BivariateProbabilityDistribution/src/BivariateProbabilityDistribution.hpp"
#include "math/implementation/BivariateProbabilityDistribution/src/conditionalProbabilityDensity.hpp"
#include "math/implementation/BivariateProbabilityDistribution/src/conditionalCumulativeProbability.hpp"
#include "math/implementation/BivariateProbabilityDistribution/src/conditionalProbabilityDistribution.hpp"

#endif

