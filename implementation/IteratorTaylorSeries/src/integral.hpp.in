#include "math/implementation/IteratorTaylorSeries.hpp"

namespace math {
namespace implementation {

/**
 * @brief Evaluated via Horner's rule
 * @result The value of the definite integral of Taylor series at @p x
 */
template< typename iterator >
inline double
IteratorTaylorSeries<iterator>::integral( const double lowerBound,
                                          const double upperBound ) const {
  std::array<double, 2> accumulator = {{0.0, 0.0}};
  auto power = this->coefficientsEnd - this->coefficientsBegin;
  double temp;
  for (std::reverse_iterator<iterator>
         it(this->coefficientsEnd),
         end(this->coefficientsBegin); it != end; ++it){
    temp = (*it) / double(power--);
    accumulator[0] = ( accumulator[0] + temp) * lowerBound;
    accumulator[1] = ( accumulator[1] + temp) * upperBound;
  }
  return accumulator[1] - accumulator[0];
}

} // implementation
} // math
