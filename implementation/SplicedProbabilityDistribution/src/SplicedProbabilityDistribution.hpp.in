#ifndef MATH_IMPLEMENTATION_SPLICEDPROBABILITYDISTRIBUTION_CTOR_HPP
#define MATH_IMPLEMENTATION_SPLICEDPROBABILITYDISTRIBUTION_CTOR_HPP

#include <algorithm>

#include "math/implementation/SplicedProbabilityDistribution.hpp"

namespace math{
namespace implementation{

template< Interpolant pdfInterpolant, Interpolant cdfInterpolant >
SplicedProbabilityDistribution
< pdfInterpolant, cdfInterpolant >::SplicedProbabilityDistribution
( const double queriedCondition,
  const math::API::ProbabilityDistribution* pd0,
  const math::API::ProbabilityDistribution* pd1,
  const std::array<double, 2>& associatedConditions,
  const bool trust ) :
  condition( queriedCondition ),
  pd0( pd0 ),
  pd1( pd1 ),
  associatedConditions( associatedConditions ){
  if (not trust){
    try{
      if ( not std::is_sorted( this->associatedConditions.begin(),
                               this->associatedConditions.end() )){
        LOG(ERROR) << "Specified probability conditions are not sorted";
        LOG(INFO) << "Left Condition: " << this->associatedConditions.front();
        LOG(INFO) << "Right Condition: " << this->associatedConditions.back();
        throw std::exception();
      }
      if ( this->condition < this->associatedConditions.front() ||
           this->condition > this->associatedConditions.back() ){
        LOG(ERROR) <<
          "Queried condition is outside the bounds of the specified conditions";
        LOG(INFO) << "Queried Condition: " << this->condition;
        LOG(INFO) << "Left Condition: " << this->associatedConditions.front();
        LOG(INFO) << "Right Condition: " << this->associatedConditions.back();
        throw std::exception();
      }
    } catch( std::exception& e ){
      LOG(INFO) << "Error while constructing spliced probability distribution";
      throw e;
    }
  }      
}

}
}

#endif
