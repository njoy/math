#include <iterator>

#include "math/implementation/IteratorLegendreSeries.hpp"

namespace math {
namespace implementation {

template< typename iterator >
inline 
IteratorLegendreSeries<iterator>::IteratorLegendreSeries
(const iterator coefficientsBegin,
 const iterator coefficientsEnd,
 const bool trust): coefficientsBegin(coefficientsBegin),
                    coefficientsEnd(coefficientsEnd){
  
  static_assert(
    std::is_same<
    typename std::iterator_traits<iterator>::value_type,
    double >::value,
    "Legendre series only defined for double precision" );
  
  static_assert(
    std::is_same
    <std::iterator_traits<std::vector<double>::iterator>::iterator_category,
    std::random_access_iterator_tag>::value,
    "Iteration only defined for random access iterators" );

  if (!trust){
    if ((coefficientsEnd - coefficientsBegin) < 1){
      LOG(ERROR) << "Ill-defined series";
      LOG(INFO) << "A Legendre series must specify one or more coefficients";
      LOG(INFO) <<
        "Difference between beginning iterator and "
        "ending iterator is less than one";
      LOG(INFO) << "Difference: " << (coefficientsEnd - coefficientsBegin);
      throw std::exception();
    }
  }
}

} // implementation
} // math
