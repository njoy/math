#ifndef MATH_IMPLEMENTATION_SPLICEDPROBABILITYDISTRIBUTION_HPP
#define MATH_IMPLEMENTATION_SPLICEDPROBABILITYDISTRIBUTION_HPP

#include <array>

#include "math/API/ProbabilityDistribution.hpp"
#include "math/implementation.hpp"

class math::implementation::SplicedProbabilityDistribution :
  public math::API::ProbabilityDistribution {
public:
  /* constructor and destructor */
  SplicedProbabilityDistribution
  ( const math::API::ProbabilityDistribution& pd0,
    const math::API::ProbabilityDistribution& pd1,
    const std::array<double, 2>& pdfWeights,
    const std::array<double, 2>& cdfWeights);

  SplicedProbabilityDistribution
  ( const SplicedProbabilityDistribution& ) = default;
  SplicedProbabilityDistribution( SplicedProbabilityDistribution&& ) = default;
  ~SplicedProbabilityDistribution() = default;

  /* method */
  /** @return The probability density at the @p event value */
  double
  probabilityDensity(const double event) const final {
    return
      this->pdfWeights.front() * this->pd0.probabilityDensity(event) +
      this->pdfWeights.back() * this->pd1.probabilityDensity(event);
  }

  /** @return The cumulative probability at the @p event value*/
  double
  cumulativeProbability(const double event) const final {
     return
       this->cdfWeights.front() * this->pd0.cumulativeProbability(event) +
       this->cdfWeights.back() * this->pd1.cumulativeProbability(event); }

  /* fields */
  const math::API::ProbabilityDistribution& pd0;
  const math::API::ProbabilityDistribution& pd1;
  std::array<double, 2> pdfWeights;
  std::array<double, 2> cdfWeights;
};

#endif
