#ifndef MATH_IMPLEMENTATION_TAYLORSERIES_DERIVATIVE_HPP
#define MATH_IMPLEMENTATION_TAYLORSERIES_DERIVATIVE_HPP

#include <type_traits>

#include "math/implementation/TaylorSeries.hpp"

namespace math {
namespace implementation {

/**
 * @brief Evaluated via Horner's rule
 * @result The value of the derivative of Taylor series at @p x
 */
template< typename OwnershipPolicy, typename T >
double
TaylorSeries< OwnershipPolicy, T >::derivative( const double x ) const {
  double accumulator;
  accumulator = 0;
  auto power = this->coefficientData.end - this->coefficientData.begin;
  if (power < 2){ return accumulator; }
  for (std::reverse_iterator
         < typename std::remove_const
         < decltype(this->coefficientData.begin) >::type >
         it(this->coefficientData.end),
         P1(this->coefficientData.begin + 2); it != P1; ++it){
    accumulator = (accumulator + (*it) * double(--power)) * x;
  }
  accumulator += this->coefficientData.begin[1];
  return accumulator;
}

} // implementation
} // math

#endif
