#ifndef MATH_IMPLEMENTATION_TAYLORSERIES_INTEGRATE_HPP
#define MATH_IMPLEMENTATION_TAYLORSERIES_INTEGRATE_HPP

#include "math/implementation/TaylorSeries.hpp"

namespace math {
namespace implementation {

/**
 * @brief Generate a new series representing the series integral
 * @param boundary The x-value for which the boundary condition exists
 * @param boundaryValue The y-value specified by the boundary condition
 * @result 
 * A vector of the coeffcients which can be use to construct a taylor series
 * representation of the indefinite integral of the calling series.
 */
template< typename OwnershipPolicy, typename T >
TaylorSeries< TransferPolicy, std::vector<double> >
TaylorSeries< OwnershipPolicy, T >::integrate_
( const double boundary, const double boundaryValue ) const {
  std::vector<double> integralCoefficients;
  int order = (this->coefficientData.end - this->coefficientData.begin) + 1;
  integralCoefficients.resize(order);
  auto integrandCoefficientIter = this->coefficientData.end - 1;
  auto integralCoefficientIter = integralCoefficients.end() - 1;
  double accumulator = 0;
  while (--order){
    *integralCoefficientIter = *integrandCoefficientIter / double(order);
    accumulator = (*integralCoefficientIter + accumulator) * boundary;
    --integralCoefficientIter;
    --integrandCoefficientIter;
  }
  *integralCoefficientIter = boundaryValue - accumulator;
  return
    TaylorSeries< math::implementation::TransferPolicy, std::vector<double> >
    ( std::move(integralCoefficients) );
}

} // implementation
} // math

#endif
