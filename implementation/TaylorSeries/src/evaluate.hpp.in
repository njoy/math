#ifndef MATH_IMPLEMENTATION_TAYLORSERIES_EVALUATE_HPP
#define MATH_IMPLEMENTATION_TAYLORSERIES_EVALUATE_HPP

#include "math/implementation/TaylorSeries.hpp"

namespace math {
namespace implementation {

/**
 * @brief Evaluated via Horner's rule
 * @result The value of the Taylor series at @p x
 */
template< typename OwnershipPolicy, typename T >
double
TaylorSeries< OwnershipPolicy, T >::evaluate( const double x ) const {
  double accumulator;
  accumulator = 0;
  for ( std::reverse_iterator
          < typename std::remove_const
          < decltype(this->coefficientData.begin) >::type >
          it( this->coefficientData.end ),
          P0( this->coefficientData.begin + 1 ); it != P0; ++it ){
    accumulator = ( accumulator + (*it) ) * x;
  }
  accumulator += *(this->coefficientData.begin);
  return accumulator;
}

} // implementation
} // math

#endif
