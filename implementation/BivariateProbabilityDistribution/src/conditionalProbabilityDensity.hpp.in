#ifndef MATH_IMPLEMENTATION_BIVARIATEPROBABILITYDISTRIBUTION_SRC_CONDITIONALPROBABILITYDENSITY_HPP
#define MATH_IMPLEMENTATION_BIVARIATEPROBABILITYDISTRIBUTION_SRC_CONDITIONALPROBABILITYDENSITY_HPP

namespace math{
namespace implementation{

/** 
 * @brief The conditional probability density ie \f$P(@p event | @p condition)\f$
 *
 * @returns 
 * The probability density function given the @p condition evalauted at @p event 
 *
 * @details 
 * It is the responsibility of the method caller to validate that the event value
 *
 */
template< double pdfInterp( const double x,
                            const double x1, const double x2,
                            const double y1, const double y2 ),
          double cdfInterp( const double x,
                            const double x1, const double x2,
                            const double y1, const double y2 ) >
double 
BivariateProbabilityDistribution
< pdfInterp, cdfInterp >::conditionalProbabilityDensity
( const double event, const double condition ) const {
  
  const auto conditionIter = std::lower_bound( this->conditions.begin(),
                                               this->conditions.end(),
                                               condition );
  try{

    if( conditionIter == this->conditions.end() ){
      LOG(ERROR) <<
        "Queried condition value is outside the bounds of the distribution";
      LOG(INFO) << "Condition value: " << condition;
      LOG(INFO) << "Upper boundary of distribution: " 
                << this->conditions.back();
      throw std::exception();
    }

    if( condition < this->conditions.front() ){
      LOG(ERROR) <<
        "Queried condition value is outside the bounds of the distribution";
      LOG(INFO) << "Condition value: " << condition;
      LOG(INFO) << "Lower boundary of distribution: " 
                << this->conditions.front();
      throw std::exception();
    }
      
    const auto conditionIterDistance = conditionIter - this->conditions.begin();
    const auto& distributionIter =
      this->conditionedProbabilityDistributions.begin() + conditionIterDistance;
    const auto& rightDistribution = *(distributionIter[0]);

    if( conditionIter == this->conditions.begin() ){
      return rightDistribution.probabilityDensity(event);
    }
    
    const auto& leftDistribution = *(distributionIter[-1]);

    return pdfInterp( condition, 
                      conditionIter[-1], conditionIter[0],
                      leftDistribution.probabilityDensity( event ),
                      rightDistribution.probabilityDensity( event ) );
  } catch ( std::exception& e ){
    LOG(INFO) << "Error while computing conditional probability density "
              << "in BivariateProbabilityDistribution.";
    throw e;
  }
}

} // namespace implementation
} // namespace math
#endif //  MATH_IMPLEMENTATION_BIVARIATEPROBABILITYDISTRIBUTION_SRC_CONDITIONALPROBABILITYDENSITY_HPP

