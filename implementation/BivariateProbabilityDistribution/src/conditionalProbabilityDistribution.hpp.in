#ifndef MATH_IMPLEMENTATION_BIVARIATEPROBABILITYDISTRIBUTION_SRC_CONDITIONALPROBABILITYDISTRIBUTION_HPP
#define MATH_IMPLEMENTATION_BIVARIATEPROBABILITYDISTRIBUTION_SRC_CONDITIONALPROBABILITYDISTRIBUTION_HPP

#include <memory>

#include "math/implementation/SplicedProbabilityDistribution.hpp"

namespace math{
namespace implementation{

/** 
 * @brief 
 * Builds a conditional probability distribution correponding to @p condition 
 *
 * @details
 * This object follows a reference policy with respect to the underlying data.
 * Consequently, the scope of validity for a the result is limited to the 
 * lifetime of bivariate probability distribution that created it
 */
template< Interpolant pdfInterpolant, Interpolant cdfInterpolant >
std::unique_ptr< math::API::ProbabilityDistribution >
BivariateProbabilityDistribution
< pdfInterpolant, cdfInterpolant >::conditionalProbabilityDistribution
( const double condition ) const {

  const auto conditionIter = std::lower_bound( this->conditions.begin(),
                                               this->conditions.end(),
                                               condition );
  try{
    if( conditionIter == this->conditions.end() ){
      LOG(ERROR) <<
        "Queried condition value is outside the bounds of the distribution";
      LOG(INFO) << "Condition value: " << condition;
      LOG(INFO) << "Upper boundary of distribution: " 
                << this->conditions.back();
      throw std::exception();
    }

    if( condition < this->conditions.front() ){
      LOG(ERROR) <<
        "Queried condition value is outside the bounds of the distribution";
      LOG(INFO) << "Condition value: " << condition;
      LOG(INFO) << "Lower boundary of distribution: " 
                << this->conditions.front();
      throw std::exception();
    }

    const auto conditionIterDistance = conditionIter - this->conditions.begin();
    const auto& distributionIter =
      this->conditionedProbabilityDistributions.begin() + conditionIterDistance;
    const auto& rightDistribution = *(distributionIter[0]);

    if( conditionIter == this->conditions.begin() ){
      std::array<double, 2> conditions =
        {{ conditionIter[0], 0.0 }};
      
      return
        std::make_unique
        < math::implementation::SplicedProbabilityDistribution
          < pdfInterpolant, cdfInterpolant > >
        ( condition, &rightDistribution, nullptr, conditions );
    }

    const auto& leftDistribution = *(distributionIter[-1]); 

    std::array<double, 2> conditions =
        {{ conditionIter[-1], conditionIter[0] }};
    
    return
      std::make_unique
      < math::implementation::SplicedProbabilityDistribution
        < pdfInterpolant, cdfInterpolant > >
      ( condition, &leftDistribution, &rightDistribution, conditions );


  } catch (std::exception& e){
    LOG(INFO) << "Error while generating probability distribution "
              << "in BivariateProbabilityDistribution givenCondition method.";
    throw e;
  }
}

} // namespace implementation
} // namespace math

#endif
