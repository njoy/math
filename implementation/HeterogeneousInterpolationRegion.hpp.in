#ifndef MATH_IMPLEMENTATION_HETEROGENEOUSINTERPOLATIONREGION_HPP
#define MATH_IMPLEMENTATION_HETEROGENEOUSINTERPOLATIONREGION_HPP

#include "math/API/InterpolationRegion.hpp"
#include "math/implementation.hpp"

class math::implementation::HeterogeneousInterpolationRegion :
  public math::API::InterpolationRegion {
public:
  /* fields */
  std::vector< std::unique_ptr<math::API::InterpolationRegion> > subregions;
  std::vector<double> subregionUpperBounds;
  
  /* constructors and destructors */
  HeterogeneousInterpolationRegion
  ( std::vector< std::unique_ptr<math::API::InterpolationRegion> >&& subregions,
    const double boundaryTolerance = 1E-14 );

  HeterogeneousInterpolationRegion
  ( HeterogeneousInterpolationRegion&& ) = default;
  
  ~HeterogeneousInterpolationRegion() = default;
  
  /* methods */
  double
  xMin() const final { return this->subregions.front()->xMin(); }

  double
  xMax() const final { return this->subregions.back()->xMax(); }

  std::vector< utility::View<const double> >
  xGrid() const final;

  std::vector< utility::View<double> >
  xGrid() final;

  std::vector< utility::View<const double> >
  yGrid() const final;

  std::vector< utility::View<double> >
  yGrid() final;

  std::unique_ptr< math::API::InterpolationRegionIntegral >
  integral(const double y0) const /* final */;
  
  double
  interpolate(const double x) const final;

  static std::vector<double>
  buildBoundaries
  ( const std::vector
    < std::unique_ptr<math::API::InterpolationRegion> >& subregions );
};

#endif
