#ifndef MATH_IMPLEMENTATION_CONDITIONALPROBABILITYDISTRIBUTION_SRC_CUMULATIVEPROBABILITYDENSITY
#define MATH_IMPLEMENTATION_CONDITIONALPROBABILITYDISTRIBUTION_SRC_CUMULATIVEPROBABILITYDENSITY

namespace math{
namespace implementation{

/** 
 * @brief 
 * The conditional cumulative probability ie 
 * \f$\int_{-\infty}^{\mathrm{event}}P(mathrm{event'} | mathrm{condition])~d mathrm{event'}\f$
 *
 * @returns 
 * The cumulative probability function given the @p condition evalauted at @p event 
 */
template< Interpolant pdfInterpolant, Interpolant cdfInterpolant >
double 
ConditionalProbabilityDistribution
< pdfInterpolant, cdfInterpolant >::cumulativeProbability
( const double event, const double condition ) const {
  const auto conditionIter = std::lower_bound
    ( this->conditions.begin(), this->conditions.end(), condition );
  try{
    if( conditionIter == this->conditions.end() ){
      LOG(ERROR) <<
        "Queried condition value is outside the bounds of the distribution";
      LOG(INFO) << "Condition value: " << condition;
      LOG(INFO) << "Upper boundary of distribution: " 
                << this->conditions.back();
      throw std::exception();
    }

    if( condition < this->conditions.front() ){
      LOG(ERROR) <<
        "Queried condition value is outside the bounds of the distribution";
      LOG(INFO) << "Condition value: " << condition;
      LOG(INFO) << "Lower boundary of distribution: " 
                << this->conditions.front();
      throw std::exception();
    }

    const auto conditionIterDistance = conditionIter - this->conditions.begin();
    const auto& distributionIter =
      this->conditionedProbabilityDistributions.begin() + conditionIterDistance;
    const auto& rightDistribution = *(distributionIter[0]);

    if( conditionIter == this->conditions.begin() ){
      return rightDistribution.cumulativeProbability( event );
    }
    
    const auto& leftDistribution = *(distributionIter[-1]);

    return cdfInterpolant( condition, 
                           conditionIter[-1], conditionIter[0],
                           leftDistribution.cumulativeProbability( event ),
                           rightDistribution.cumulativeProbability( event ) );
  } catch ( std::exception& e ){
    LOG(INFO) << "Error while computing conditional cumulative probability";
    throw e;
  }
}

} // namespace implementation
} // namespace math

#endif

