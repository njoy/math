#ifndef MATH_INTERPOLATE_LOGLIN_HPP
#define MATH_INTERPOLATE_LOGLIN_HPP

#include "math/interpolate.hpp"

/**
 * @param x
 * the independent variable value at which the interpolant ought be evaluated
 * @param x1
 * the nearest independent variable value less than @p x at which the function 
 * value is known
 * @param x2
 * the nearest independent variable value greater than @p x at which the function
 * value is known
 * @param y1
 * the function value at @p x1
 * @param y2
 * the function value at @p x2
 *
 * @result the value of a linear-logarithmic interpolant at @p x
 *
 * @details 
 * Renders a function value at @p x given function values @p y1 and @p y2 
 * evaluated at @p x1 and @p x2, respectively, assuming the change in y is 
 * proportional to the change in the logarithm of x. This is exact for functions 
 * of the form \f$ y = a~log_b(x)\f$.
 */
inline double
math::interpolate::linLog
( const double x,                   // assumed x1 <= x <= x2
  const double x1, const double x2, // assumed x1 < x2
  const double y1, const double y2 ){
  const double ix1 = 1.0/x1;
  return y1 + (y2 - y1) * log(x * ix1) / log(x2 * ix1);
}

#endif
