#ifndef MATH_INTERPOLATE_WITHITERATORS_HPP
#define MATH_INTERPOLATE_WITHITERATORS_HPP

#include "math/interpolate.hpp"

namespace math{
namespace interpolate {

/** 
 * @param x
 * the independent variable value at which a interpolant function value estimate
 * is desired. 
 *
 * @param Xit1
 * An ordered-container iterator referencing the the first element independent
 * variable value grid in the range of interest
 *
 * @param Xit2
 * An ordered-container iterator specifiying the end of the range of interest on 
 * the independent variable value grid 
 *
 * @param Yit 
 * An ordered-container iterator to the element specifying the function value  
 * evaluated at the independent variable value reference by @p Xit1
 */
template<typename Iterator, Interpolant interpolant >
double
withIterators( const double x,      // assumed *Xit1 <= x <= *Xit2
               const Iterator Xit1,
               const Iterator Xit2, // assumed *Xit1 < *Xit2
               const Iterator Yit ){ 
  /* the iterator types must reference double precision data */
  static_assert(
    std::is_same
    < typename std::iterator_traits<Iterator>::value_type,
      double >::value,
    "Iterpolation is only defined for double precision" );
  
  /* binary search requires random access to be efficient */
  static_assert(
    std::is_same
    < typename std::iterator_traits<Iterator>::iterator_category,
    std::random_access_iterator_tag >::value,
    "Iteration only defined for random access iterators" );
  
  const auto Xit = std::lower_bound(Xit1, Xit2, x);
  const auto offset = Xit - Xit1;
  if (*Xit == x){
    return ( Xit == Xit1 || *Xit != Xit[1] ) ?
      Yit[offset] :
      0.5 * ( Yit[offset] + Yit[offset + 1] );
  }
  const auto yit = Yit + offset;
  return interpolant(x, Xit[-1], Xit[0], yit[-1], yit[0]);
}

/** 
 * @param x
 * the independent variable value at which a interpolant integral value is 
 * desired. 
 *
 * @param Xit1
 * An ordered-container iterator referencing the the first element independent
 * variable value grid in the range of interest
 *
 * @param Xit2
 * An ordered-container iterator specifiying the end of the range of interest on 
 * the independent variable value grid 
 *
 * @param Yit 
 * An ordered-container iterator to the element specifying the interpolant 
 * integral value evaluated at the independent variable value reference by 
 * @p Xit1
 *
 * @param dYit 
 * An ordered-container iterator to the element specifying the function value 
 * evaluated at the independent variable value reference by @p Xit1
 */
template< typename InterpolationTableIterator,
          typename Iterator,
          IntegralInterpolant integralInterpolant >
double
withIterators( const double x, /* assumed *Xit1 <= x <= *Xit2 && assumed *Xit1 < *Xit2 */
               const InterpolationTableIterator Xit1,
               const InterpolationTableIterator Xit2,               
               const Iterator Yit,
               const InterpolationTableIterator dYit ){
  /* the iterator types must reference double precision data */
  static_assert(
    std::is_same
    < typename std::iterator_traits<InterpolationTableIterator>::value_type,
      double >::value,
    "Iterpolation is only defined for double precision" );
  static_assert(
    std::is_same
    < typename std::iterator_traits<Iterator>::value_type,
      double >::value,
    "Iterpolation is only defined for double precision" );
  
  /* binary search requires random access to be efficient */
  static_assert(
    std::is_same
    < typename std::iterator_traits<InterpolationTableIterator>::iterator_category,
    std::random_access_iterator_tag >::value,
    "Iteration only defined for random access iterators" );
  static_assert(
    std::is_same
    < typename std::iterator_traits<Iterator>::iterator_category,
    std::random_access_iterator_tag >::value,
    "Iteration only defined for random access iterators" );
  
  auto Xit = std::lower_bound(Xit1, Xit2, x);
  const auto offset = Xit - Xit1;
  if (*Xit == x){
    return ( Xit == Xit1 || *Xit != Xit[1] ) ?
      Yit[offset] :
      0.5 * (Yit[offset] + Yit[offset + 1]);
  }
  const auto yit  = Yit + offset;
  const auto dyit = dYit + offset;
  return integralInterpolant( x,
                              Xit[-1], Xit[0],
                              yit[-1], yit[0],
                              dyit[-1], dyit[0] );
}

}
}

#endif
