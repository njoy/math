#ifndef MATH_INTERPOLATE_INTEGRATE_HPP
#define MATH_INTERPOLATE_INTEGRATE_HPP

#include <type_traits>

#include "math/interpolate.hpp"

namespace math{
namespace interpolate {

/**
 * @param x1
 * the lower bound of the definite integral 
 * @param x2
 * the upper bound of the definite integral 
  * @param y1
 * the function value at @p x1
 * @param y2
 * the function value at @p x2
 *
 * @result the definite integral value from @p x1 to @ p x2
 */
template< double interpolation(const double x,
                               const double x1, const double x2,
                               const double y1, const double y2) >
double
integrate(const double x1, const double x2,
          const double y1, const double y2){
  ignore(x1);
  ignore(x2);
  ignore(y1);
  ignore(y2);

  /* Damned if you do, damned if you don't */
  /* Both asserts cannot simultaneously pass. In other words, this
   * function template should never be permitted to be instantiated
   * without deferring to a specialization.
   */
  static_assert(
    std::is_member_function_pointer<decltype(interpolation)>::value,
    "The math::interpolate::integrate function is"
    " not defined for this interpolation scheme");
  static_assert(
    not std::is_member_function_pointer<decltype(interpolation)>::value,
    "The math::interpolate::integrate function is"
    " not defined for this interpolation scheme");
  return 0.0;
}

template<>
inline double
integrate< math::interpolate::histogram >(const double x1, const double x2,
                                          const double y1, const double y2){
  ignore(y2);
  return (x2 - x1) * y1;
}

template<>
inline double
integrate< math::interpolate::linLin >(const double x1, const double x2,
                                       const double y1, const double y2){
  return (x2 - x1) * (y1 + y2) * 0.5;
}

template<>
inline double
integrate< math::interpolate::linLog >(const double x1, const double x2,
                                       const double y1, const double y2){
  return x2 * y2 - x1 * y1 +  (x2 - x1) * (y1 - y2) / log(x2/x1);
}

template<>
inline double
integrate< math::interpolate::logLin >(const double x1, const double x2,
                                       const double y1, const double y2){
  return (y2 - y1) * (x2 - x1) / log(y2 / y1);
}

template<>
inline double
integrate< math::interpolate::logLog >(const double x1, const double x2,
                                       const double y1, const double y2){
  if (std::abs(x2 - x1)/std::max(std::abs(x1), std::abs(x2)) < 1E-14 ){return 0;}
  const double ix = 1.0 / x1;
  const double c = log( y2 / y1 ) / log( x2 * ix ) + 1.0;
  return (y1 * x1) / c * ( pow( x2 * ix, c ) - 1.0 );
}

}
}

#endif
