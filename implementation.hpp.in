#ifndef MATH_IMPLEMENTATION_HPP
#define MATH_IMPLEMENTATION_HPP

#include "math/API.hpp"

namespace math{
namespace implementation{

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Convenience definitions to reduce template verbosity */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
using Interpolant = double (*)( const double,
                                const double, const double,
                                const double, const double );

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* data ownership policy tags */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * @brief 
 * A struct used as a tag parameter in template class specification to indicate 
 * ownership of data should be expected to be transfered during object 
 * construction
 *
 * @details
 * Because data resides with the class instance, the object is independent; which
 * is to say the scope of the objects validity is not limited to the lifetime of 
 * the data source 
 */
struct TransferPolicy{};

/**
 * @brief 
 * A struct used as a tag parameter in template class specification to indicate 
 * ownership of data should not be expected to be transfered during object 
 * construction
 *
 * @details
 * Because data is accessed by way of reference and resides outside the class 
 * instance, the object is dependent; which is to say the scope of the objects 
 * validity is limited to the lifetime of the data. 
 */
struct ReferencePolicy{};

/**
 * @brief
 * A helper struct which permits class field definitions to remain unspecialized
 * with repect to their data ownership policy
 */
template< typename OwnershipPolicy, typename T >
struct AccessAbstraction;

/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* class InterpolationTable */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/
template< Interpolant interpolant, typename OwnershipPolicy, typename T >
class InterpolationTable;

template< Interpolant interpolant >
using DataOwningInterpolationTable =
  InterpolationTable< interpolant, TransferPolicy, std::vector<double> >;

template< typename Iterator, Interpolant interpolant >
using DataReferencingInterpolationTable =
    InterpolationTable< interpolant, ReferencePolicy, Iterator >;

class CompositeInterpolationTable;

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* class InterpolationTableIntegral */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
template< typename Iterator, Interpolant interpolant >
class InterpolationTableIntegral;

class CompositeInterpolationTableIntegral;

/*~~~~~~~~~~~~~~~~~~~~~~~*/
/* class SeriesExpansion */
/*~~~~~~~~~~~~~~~~~~~~~~~*/
template< typename OwnershipPolicy, typename T >
class TaylorSeries;

using DataOwningTaylorSeries =
   TaylorSeries< TransferPolicy, std::vector<double> >;

template< typename Iterator >
using DataReferencingTaylorSeries = 
   TaylorSeries< ReferencePolicy, Iterator >;

template< typename OwnershipPolicy, typename T >
class LegendreSeries;

using DataOwningLegendreSeries =
  LegendreSeries< TransferPolicy, std::vector<double> >;

template< typename Iterator >
using DataReferencingLegendreSeries = 
  LegendreSeries< ReferencePolicy, Iterator >;

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* class ProbabilityDistribution */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
template< typename pdfFunctor, typename cdfFunctor >
class ParametricProbabilityDistribution;

template< Interpolant pdfInterpolant, Interpolant cdfInterpolant >
class SplicedProbabilityDistribution;

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* class BivariateProbabilityDistribution */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
template< Interpolant pdfInterpolant, Interpolant cdfInterpolant >
class BivariateProbabilityDistribution;

}   // namespace implementation
}   // namespace math

#include "math/implementation/AccessAbstraction.hpp"

#include "math/implementation/InterpolationTableIntegral.hpp"

#include "math/implementation/InterpolationTable.hpp"

#include "math/implementation/TaylorSeries.hpp"

#include "math/implementation/LegendreSeries.hpp"

#include "math/implementation/ParametricProbabilityDistribution.hpp"

#include "math/implementation/SplicedProbabilityDistribution.hpp"

#include "math/implementation/BivariateProbabilityDistribution.hpp"

#endif
