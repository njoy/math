#ifndef MATH_INTERPOLATE_HPP
#define MATH_INTERPOLATE_HPP

#include <cmath>
#include <algorithm>

#include "utility.hpp"

#include "math.hpp"

namespace math{

/**
 * @namespace interpolate
 *
 * @brief 
 * A collection routines related to interpolation.
 */
namespace interpolate {

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Convenience definitions to reduce template verbosity */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
using Interpolant = double (*)( const double,
                                const double, const double,
                                const double, const double );

using IntegralInterpolant = double (*)( const double,
                                        const double, const double,
                                        const double, const double,
                                        const double, const double );

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* two-point 2D-interpolation schemes */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * @brief Evaluate a histogram interpolant given two grid points.
 *
 * @param y1
 * the function value at @p x1
 *
 * @result the value of a histogram interpolant at x
 */
inline double
histogram( const double,
           const double, const double,
           const double y1, const double ){
  return y1;
};

/**
 * @brief Evaluate a linear-linear interpolant given two grid points.
 *
 * @param x
 * the independent variable value at which the interpolant ought be evaluated
 *
 * @param x1
 * the nearest independent variable value less than @p x at which the function 
 * value is known
 *
 * @param x2
 * the nearest independent variable value greater than @p x at which the function
 * value is known
 *
 * @param y1
 * the function value at @p x1
 *
 * @param y2
 * the function value at @p x2
 *
 * @result the value of a linear-linear interpolant at @p x
 *
 * @details 
 * Renders a function value at @p x given function values @p y1 and @p y2 
 * evaluated at @p x1 and @p x2, respectively, assuming the change in y is 
 * proportional to the change in x. This is exact for first order polynomials.
 */
inline double
linLin( const double x,                   // assumed x1 <= x <= x2
        const double x1, const double x2, // assumed x1 < x2
        const double y1, const double y2 ){
  return (y1 + (y2 - y1)*(x - x1)/(x2 - x1));
};

/**
 * @brief Evaluate a linear-logarithmic interpolant given two grid points.
 *
 * @param x
 * the independent variable value at which the interpolant ought be evaluated
 * @param x1
 * the nearest independent variable value less than @p x at which the function 
 * value is known
 * @param x2
 * the nearest independent variable value greater than @p x at which the function
 * value is known
 * @param y1
 * the function value at @p x1
 * @param y2
 * the function value at @p x2
 *
 * @result the value of a linear-logarithmic interpolant at @p x
 *
 * @details 
 * Renders a function value at @p x given function values @p y1 and @p y2 
 * evaluated at @p x1 and @p x2, respectively, assuming the change in y is 
 * proportional to the change in the logarithm of x. This is exact for functions 
 * of the form \f$ y = a~log_b(x)\f$.
 */
inline double
linLog( const double x,                   // assumed x1 <= x <= x2
        const double x1, const double x2, // assumed x1 < x2
        const double y1, const double y2 ){
  const double ix1 = 1.0/x1;
  return y1 + (y2 - y1) * log(x * ix1) / log(x2 * ix1);
};

/**
 * @brief Evaluate a logarithmic-linear interpolant given two grid points.
 *
 * @param x
 * the independent variable value at which the interpolant ought be evaluated
 *
 * @param x1
 * the nearest independent variable value less than @p x at which the function 
 * value is known
 *
 * @param x2
 * the nearest independent variable value greater than @p x at which the function
 * value is known
 *
 * @param y1
 * the function value at @p x1
 *
 * @param y2
 * the function value at @p x2
 *
 * @result the value of a logarithmic-linear interpolant at @p x
 *
 * @details 
 * Renders a function value at @p x given function values @p y1 and @p y2 
 * evaluated at @p x1 and @p x2, respectively, assuming the change in the 
 * logarithm of y is proportional to the change in x. This is exact for functions
 * of the form \f$ y = a~b^{cx} \f$.
 */
inline double
logLin( const double x,                   // assumed x1 <= x <= x2
        const double x1, const double x2, // assumed x1 < x2
        const double y1, const double y2 ){
  return y1 * std::pow((y2 / y1), (x - x1) / (x2 - x1));
};

/**
 * @brief Evaluate a logarithmic-logarithmic interpolant given two grid points.
 *
 * @param x
 * the independent variable value at which the interpolant ought be evaluated
 * @param x1
 * the nearest independent variable value less than @p x at which the function 
 * value is known
 * @param x2
 * the nearest independent variable value greater than @p x at which the function
 * value is known
 * @param y1
 * the function value at @p x1
 * @param y2
 * the function value at @p x2
 *
 * @result the value of a logarithmic-logarithmic interpolant at @p x
 *
 * @details 
 * Renders a function value at x given function values y1 and y2 evaluated at x1 
 * and x2, respectively, assuming the change in the logarithm of y is 
 * proportional to the change in the logarithm of x. This is exact for functions
 * of the form \f$ y = a~x^b \f$. 
 */
inline double
logLog( const double x,                   // assumed x1 <= x <= x2
        const double x1, const double x2, // assumed x1 < x2
        const double y1, const double y2 ){
  if ((x1*x2 <= 0) || (y1*y2 <= 0.0)){ return linLin(x, x1, x2, y1, y2); }
  const double ix = 1.0 / x1;
  return y1 * pow(x * ix, log( y2 / y1 ) / log( x2 * ix ));
};

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* interpolation-scheme-specific interpolation */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

/**
 * @brief 
 * Evaluate the definite integral of a parameter interpolant between @p x1 and 
 * @p x2, given function values @p y1 and @p y2, evaluated at @p x1 and @p x2, 
 * repectively.
 */
template< Interpolant interpolant >
double
integrate( const double x1, const double x2,  // assumed x1 < x2
           const double y1, const double y2 );

/**
 * @brief 
 * Evaluate the definite integral of a parameter interpolant between @p x1 and 
 * @p x, given function values @p dy1 and @p dy2, evaluated at @p x1 and @p x2, 
 * repectively, and assuming y equals @p y1 at @p x1. 
 *
 * @param x
 * the upper bound at which the interpolant integral ought be evaluated
 * @param x1
 * the nearest independent variable value less than @p x at which the function
 * value is known
 * @param x2
 * the nearest independent variable value greater than @p x at which the function
 * value is known
 * @param y1
 * the interpolant integral value at @p x1
 * @param y2
 * the interpolant integral value at @p x2
 * @param dy1
 * the function value at @p x1
 * @param dy2
 * the function value at @p x2
 *
 * @result the value of a logarithmic-linear interpolant intergral at @p x
 */
template< Interpolant interpolant >
double
integralInterpolate(const double x,                    // assumed x1 <= x <= x2
                    const double x1,  const double x2, // assumed x1 < x2
                    const double y1,  const double,
                    const double dy1, const double dy2){
  return y1 + integrate<interpolant>(x1, x,
                                     dy1, interpolant(x, x1, x2, dy1, dy2));
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*             splines                */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * @brief A cubic spline interpolant for data known to be monotonic
 */
double
monotoneCubicSpline( const double x,                    // assumed x1 <= x <= x2
                     const double x1,  const double x2, // assumed x1 < x2
                     const double y1,  const double y2,
                     const double dy1, const double dy2 );

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* two-point 2D-interpolation over containers */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * @brief 
 * Computes the value of an interpolant given iterators to a containers 
 * specifying the x-grid and y-grid (function values computed at each entry of 
 * the x-grid)
 */
template< typename Iterator, Interpolant interpolant >
double
withIterators( const double x,      /* assumed *Xit1 <= x <= *Xit2 */
               const Iterator Xit1,
               const Iterator Xit2, /* assumed *Xit1 < *Xit2 */
               const Iterator Yit );               

/**
 * @brief 
 * Computes the definite integral of an interpolant given iterators to a 
 * containers specifying the x-grid, dy-grid (function values computed at each 
 * entry of the x-grid), and y-grid (function integral values evaluated at each 
 * entry of the x-grid)          
 */
template< typename InterpolationTableIterator,
          typename Iterator,
          IntegralInterpolant integralInterpolant > 
double
withIterators( const double x, /* assumed *Xit1 <= x <= *Xit2 && assumed *Xit1 < *Xit2 */
               const InterpolationTableIterator Xit1,
               const InterpolationTableIterator Xit2,               
               const Iterator Yit,
               const InterpolationTableIterator dYit );

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*         Grid generation utilities  */
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * @brief 
 * A routine to determine, for a given function, a series of x-values such that 
 * linear interpolation will be accurate to within a specified convergence 
 * criterion.
 */
template< typename functor, typename convergenceCriterion,
          typename xIterator, typename yIterator >
void constructLinearLinearInterpolationGrid
( const functor& f,
  const convergenceCriterion& hasConverged,
  xIterator referenceXGridIterator,
  const xIterator referenceXGridEnd,
  yIterator referenceYGridIterator,
  std::vector<double>& linearizedXGrid,
  std::vector<double>& linearizedYGrid );

/**
 * @brief 
 * A convenience overload to allow for the linearization of functions without 
 * constructing a functor definition on client-side code. Effectively syntactic 
 * sugar.
 */
template< double f(const double), typename convergenceCriterion,
          typename xIterator, typename yIterator >
void constructLinearLinearInterpolationGrid
( const convergenceCriterion& hasConverged,
  xIterator referenceXGridIterator,
  const xIterator referenceXGridEnd,
  yIterator referenceYGridIterator,
  std::vector<double>& linearizedXGrid,
  std::vector<double>& linearizedYGrid );

} // namespace interpolate
} // namespace math

#include "math/interpolate/src/integrate.hpp"
#include "math/interpolate/src/withIterators.hpp"
#include "math/interpolate/src/constructLinearLinearInterpolationGrid.hpp"

#endif
